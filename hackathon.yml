---
AWSTemplateFormatVersion: "2010-09-09"
Description: >-
  This is a broken template - Please fix it to get your unsecured 
  highly available apache website to work.
  This DevOps Hackathon template will create ELB Security Group, ELB, ELB Listener, 
  Target Group, Launch Configuration and Autoscaling group.

Parameters:
  CustomVPC:
    Description: Select One VPC available in your existing account
    Type: AWS::EC2::VPC::Id
  PublicSubnets:
    Type: "List<AWS::EC2::Subnet::Id>"
    Description: The list of SubnetIds in your Virtual Private Cloud (VPC)
    ConstraintDescription: >-
      must be a list of at least two existing subnets associated with at least
      two different availability zones. They should be residing in the selected
      Virtual Private Cloud.
  InstanceType:
    Description: WebServer EC2 instance type (has default, AllowedValues)
    Type: String
    Default: t3.micro #Changed the default value to t3.micro
    AllowedValues:
      - t1.micro
      - t2.nano
      - t2.small
      - t3.micro #added t3.micro to the allowed value

Mappings:
  RegionMap:
    us-east-1: # Testing only
      HVM64: ami-0aa7d40eeae50c9a9
    us-west-1:
      HVM64: ami-0bdb828fd58c52235
    us-east-2:
      HVM64: ami-047bb4163c506cd98
    us-west-2:
      HVM64: ami-06cd52961ce9f0d85
    eu-west-3:
      HVM64: ami-0ca5ef73451e16dc1  # AMI was changed

Resources:
  ELBTargetGroup:
    Type: "AWS::ElasticLoadBalancingV2::TargetGroup"
    Properties:
      HealthCheckIntervalSeconds: 6
      HealthCheckTimeoutSeconds: 5
      HealthyThresholdCount: 2
      Port: 80
      Protocol: HTTP
      UnhealthyThresholdCount: 2
      VpcId: !Ref CustomVPC
      TargetType: instance
  ELBSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: "ELBTraffic"
      GroupDescription: "Enable HTTP access on the inbound port for ELB"
      VpcId: !Ref CustomVPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0 #changed from 10.0.0.0/0 to allowing all traffic
      Tags:
        - Key: Name
          Value: ELBSecurityGroup
  DBSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: "DBTraffic"
      GroupDescription: "Enable HTTP access on the inbound port for DB"
      VpcId: !Ref CustomVPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80 #changed from 443 to 80 for http access
          ToPort: 80 #changed from 443 to 80 for http access
          CidrIp: 0.0.0.0/0
      Tags:
        - Key: Name
          Value: DBSecurityGroup
  ElasticLoadBalancer:
    Type: "AWS::ElasticLoadBalancingV2::LoadBalancer"
    Properties:
      Subnets: !Ref PublicSubnets
      SecurityGroups:
        - !Ref ELBSecurityGroup # changed from DBSecurityGroup
  ElbListener:
    Type: "AWS::ElasticLoadBalancingV2::Listener"
    Properties:
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref ELBTargetGroup
      LoadBalancerArn: !Ref ElasticLoadBalancer
      Port: "80" #Changed from 3306 to 80
      Protocol: HTTP #changed from HTTPS to HTTP
  AsgConfig:
    Type: AWS::AutoScaling::LaunchConfiguration
    Properties:
      InstanceType: !Ref InstanceType
      SecurityGroups:
        - !Ref ELBSecurityGroup #changed from DBSecurityGroup
      ImageId: !FindInMap [RegionMap, !Ref "AWS::Region", HVM64] # corrected the Top level key from HVM94 to HVM64
      UserData:
        Fn::Base64: !Sub |
          #!/bin/bash
          yum update -y
          yum install -y httpd
          systemctl start httpd
          systemctl enable httpd
          echo "<html><body><h1>Welcome to DevOps Hackathon ${AWS::Region}<h1></body></html>" > /var/www/html/index.html
  AsgGroup:
    Type: AWS::AutoScaling::AutoScalingGroup
    DependsOn:
      - ELBTargetGroup
      - ElasticLoadBalancer
    Properties:
      #PropagateAtLaunch: 'true'
      VPCZoneIdentifier: !Ref PublicSubnets
      LaunchConfigurationName: !Ref AsgConfig
      MinSize: "0"
      MaxSize: "4"
      DesiredCapacity: "2"  # adding desire capacity
      HealthCheckGracePeriod: 300
      MaxInstanceLifetime: 2592000
      TargetGroupARNs:
        - !Ref ELBTargetGroup

Outputs:
  outputELBDNSName:
    Description: DNS name of the application
    Value: !GetAtt ElasticLoadBalancer.DNSName
  outputELBTargetGroup:
    Description: A reference to the created Target Group
    Value: !Ref ELBTargetGroup
  outputELBSecurityGroup:
    Description: A reference to the created Security Group
    Value: !Ref ELBSecurityGroup
  outputElasticLoadBalancer:
    Description: A reference to the created Elastic Load Balancer
    Value: !Ref ElasticLoadBalancer
  outputElasticListener:
    Description: A reference to the created Elastic Load Balancer Listener
    Value: !Ref ElbListener
  outputAsgConfig:
    Description: Id for autoscaling launch configuration
    Value: !Ref AsgConfig
  outputAsgGroup:
    Description: Id for autoscaling group
    Value: !Ref AsgGroup
